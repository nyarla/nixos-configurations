diff --git a/vmci-only/linux/driver.c b/vmci-only/linux/driver.c
index d419350..1c1f196 100644
--- a/vmci-only/linux/driver.c
+++ b/vmci-only/linux/driver.c
@@ -26,6 +26,7 @@
 
 #include <linux/file.h>
 #include <linux/fs.h>
+#include <linux/vmalloc.h>
 #include <linux/init.h>
 #if defined(__x86_64__) && LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 12)
 #   include <linux/ioctl32.h>
@@ -33,6 +34,7 @@
 asmlinkage __attribute__((weak)) long
 sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
 #endif
+
 #include <linux/miscdevice.h>
 #include <linux/moduleparam.h>
 #include <linux/poll.h>
@@ -1489,7 +1491,9 @@ VMCIUserVALockPage(VA addr) // IN:
    int retval;
 
    down_read(&current->mm->mmap_sem);
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+   retval = get_user_pages(addr, 1, FOLL_WRITE, &page, NULL);
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
    retval = get_user_pages(addr, 1, 1, 0, &page, NULL);
 #else
    retval = get_user_pages(current, current->mm, addr,
@@ -1709,7 +1713,7 @@ vmci_guest_init(void)
    /* This should be last to make sure we are done initializing. */
    retval = pci_register_driver(&vmci_driver);
    if (retval < 0) {
-      vfree(data_buffer);
+      kvfree(data_buffer);
       data_buffer = NULL;
       return retval;
    }
@@ -1745,11 +1749,11 @@ vmci_enable_msix(struct pci_dev *pdev) // IN
       vmci_dev.msix_entries[i].vector = i;
    }
 
-   result = pci_enable_msix(pdev, vmci_dev.msix_entries, VMCI_MAX_INTRS);
+   result = pci_enable_msix_exact(pdev, vmci_dev.msix_entries, VMCI_MAX_INTRS);
    if (!result) {
       vmci_dev.exclusive_vectors = TRUE;
-   } else if (result > 0) {
-      result = pci_enable_msix(pdev, vmci_dev.msix_entries, 1);
+   } else {
+      result = pci_enable_msix_exact(pdev, vmci_dev.msix_entries, 1);
    }
    return result;
 }
@@ -2505,11 +2509,9 @@ vmci_init(void)
 static void __exit
 vmci_exit(void)
 {
-   int retval;
-
    if (guestDeviceInit) {
       pci_unregister_driver(&vmci_driver);
-      vfree(data_buffer);
+      kvfree(data_buffer);
       data_buffer = NULL;
       guestDeviceInit = FALSE;
    }
@@ -2519,12 +2521,8 @@ vmci_exit(void)
 
       VMCI_HostCleanup();
 
-      retval = misc_deregister(&linuxState.misc);
-      if (retval) {
-         Warning(LGPFX "Module %s: error unregistering\n", VMCI_MODULE_NAME);
-      } else {
-         Log(LGPFX"Module %s: unloaded\n", VMCI_MODULE_NAME);
-      }
+      misc_deregister(&linuxState.misc);
+      Log(LGPFX"Module %s: unloaded\n", VMCI_MODULE_NAME);
 
       hostDeviceInit = FALSE;
    }
diff --git a/vmci-only/linux/vmciKernelIf.c b/vmci-only/linux/vmciKernelIf.c
index e18ce66..fcde1e2 100644
--- a/vmci-only/linux/vmciKernelIf.c
+++ b/vmci-only/linux/vmciKernelIf.c
@@ -40,6 +40,10 @@
 #include <linux/socket.h>       /* For memcpy_{to,from}iovec(). */
 #include <linux/vmalloc.h>
 #include <linux/wait.h>
+#include <linux/skbuff.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 11, 0)
+#include <linux/sched/signal.h>
+#endif
 
 #include "compat_highmem.h"
 #include "compat_interrupt.h"
@@ -1214,21 +1218,21 @@ __VMCIMemcpyToQueue(VMCIQueue *queue,   // OUT:
       } else {
          toCopy = size - bytesCopied;
       }
-
+      /* Code cloned from kernels drivers/misc/vmw_vmci/vmci_queue_pair.c */
       if (isIovec) {
-         struct iovec *iov = (struct iovec *)src;
-         int err;
-
-         /* The iovec will track bytesCopied internally. */
-         err = memcpy_fromiovec((uint8 *)va + pageOffset, iov, toCopy);
-         if (err != 0) {
-            if (kernelIf->host) {
-               kunmap(kernelIf->u.h.page[pageIndex]);
+            struct msghdr *msg = (struct msghdr *)src;
+            int err;
+
+            /* The iovec will track bytes_copied internally. */
+            err = memcpy_from_msg((u8 *)va + pageOffset, msg, toCopy);
+            if (err != 0) {
+                if (kernelIf->host)
+                    kunmap(kernelIf->u.h.page[pageIndex]);
+                return VMCI_ERROR_INVALID_ARGS;
             }
-            return VMCI_ERROR_INVALID_ARGS;
-         }
-      } else {
-         memcpy((uint8 *)va + pageOffset, (uint8 *)src + bytesCopied, toCopy);
+        } else {
+            memcpy((u8 *)va + pageOffset,
+                   (u8 *)src + bytesCopied, toCopy);
       }
 
       bytesCopied += toCopy;
@@ -1291,11 +1295,11 @@ __VMCIMemcpyFromQueue(void *dest,             // OUT:
       }
 
       if (isIovec) {
-         struct iovec *iov = (struct iovec *)dest;
+	 struct msghdr *msg = (struct msghdr *)dest;
          int err;
 
          /* The iovec will track bytesCopied internally. */
-         err = memcpy_toiovec(iov, (uint8 *)va + pageOffset, toCopy);
+	 err = memcpy_to_msg(msg, (uint8 *)va + pageOffset, toCopy);
          if (err != 0) {
             if (kernelIf->host) {
                kunmap(kernelIf->u.h.page[pageIndex]);
@@ -1852,7 +1856,11 @@ VMCIReleasePages(struct page **pages,  // IN
       if (dirty) {
          set_page_dirty(pages[i]);
       }
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 99)
+      put_page(pages[i]);
+#else
       page_cache_release(pages[i]);
+#endif
       pages[i] = NULL;
    }
 }
@@ -2069,7 +2077,11 @@ VMCIHost_GetUserMemory(VA64 produceUVA,       // IN
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 6, 0)
    retval = get_user_pages((VA)produceUVA,
                            produceQ->kernelIf->numPages,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+                           FOLL_WRITE,
+#else
                            1, 0,
+#endif
                            produceQ->kernelIf->u.h.headerPage,
                            NULL);
 #else
@@ -2088,11 +2100,19 @@ VMCIHost_GetUserMemory(VA64 produceUVA,       // IN
       goto out;
    }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 5, 99)
+   retval = get_user_pages((VA)consumeUVA,
+#else
    retval = get_user_pages(current,
                            current->mm,
                            (VA)consumeUVA,
+#endif
                            consumeQ->kernelIf->numPages,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 9, 0)
+                           FOLL_WRITE,
+#else
                            1, 0,
+#endif
                            consumeQ->kernelIf->u.h.headerPage,
                            NULL);
    if (retval < consumeQ->kernelIf->numPages) {
diff --git a/vmci-only/shared/compat_module.h b/vmci-only/shared/compat_module.h
index 2af7372..de1713d 100644
--- a/vmci-only/shared/compat_module.h
+++ b/vmci-only/shared/compat_module.h
@@ -79,5 +79,12 @@ static const char __module_cat(tag, __LINE__)[]                               \
 #else
    typedef int compat_mod_param_bool;
 #endif
-
+/*
+ * Linux kernel >= 4.2.99 does not return anything from misc_deregister
+ */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 3, 0)
+#define compat_misc_deregister(misc) misc_deregister(misc)
+#else
+#define compat_misc_deregister(misc) ({misc_deregister(misc);0;})
+#endif
 #endif /* __COMPAT_MODULE_H__ */
diff --git a/vmci-only/shared/compat_uaccess.h b/vmci-only/shared/compat_uaccess.h
index d58ee05..641bd2b 100644
--- a/vmci-only/shared/compat_uaccess.h
+++ b/vmci-only/shared/compat_uaccess.h
@@ -21,7 +21,9 @@
 
 
 /* User space access functions moved in 2.1.7 to asm/uaccess.h --hpreg */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 1, 7)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+#   include <linux/uaccess.h>
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 1, 7)
 #   include <asm/uaccess.h>
 #else
 #   include <asm/segment.h>
diff --git a/vmci-only/shared/vm_basic_defs.h b/vmci-only/shared/vm_basic_defs.h
index b40e9b6..3c81442 100644
--- a/vmci-only/shared/vm_basic_defs.h
+++ b/vmci-only/shared/vm_basic_defs.h
@@ -716,6 +716,7 @@ typedef int pid_t;
                                                      lfMessageFont)
 
 /* This is not intended to be thread-safe. */
+#ifndef DO_ONCE
 #define DO_ONCE(code)                                                   \
    do {                                                                 \
       static Bool _doOnceDone = FALSE;                                  \
@@ -724,6 +725,7 @@ typedef int pid_t;
          code;                                                          \
       }                                                                 \
    } while (0)
+#endif
 
 /*
  * Bug 827422 and 838523.
diff --git a/vsock-only/linux/af_vsock.c b/vsock-only/linux/af_vsock.c
index c068a1a..f0f81fe 100644
--- a/vsock-only/linux/af_vsock.c
+++ b/vsock-only/linux/af_vsock.c
@@ -106,6 +106,7 @@
 #include <linux/list.h>
 #include <linux/wait.h>
 #include <linux/init.h>
+#include <linux/sched/signal.h>
 #include <asm/io.h>
 #if defined(__x86_64__) && LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 12)
 #   include <linux/ioctl32.h>
@@ -213,9 +214,13 @@ static int VSockVmciDgramConnect(struct socket *sock,
                                  struct sockaddr *addr, int addrLen, int flags);
 static int VSockVmciStreamConnect(struct socket *sock,
                                   struct sockaddr *addr, int addrLen, int flags);
-static int VSockVmciAccept(struct socket *sock, struct socket *newsock, int flags);
+static int VSockVmciAccept(struct socket *sock, struct socket *newsock, int flags, bool kern);
 static int VSockVmciGetname(struct socket *sock,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 17, 0)
                             struct sockaddr *addr, int *addrLen, int peer);
+#else
+                            struct sockaddr *addr, int peer);
+#endif
 static unsigned int VSockVmciPoll(struct file *file,
                                   struct socket *sock, poll_table *wait);
 static int VSockVmciListen(struct socket *sock, int backlog);
@@ -233,14 +238,10 @@ static int VSockVmciStreamSetsockopt(struct socket *sock, int level, int optname
 static int VSockVmciStreamGetsockopt(struct socket *sock, int level, int optname,
                                      char __user *optval, int __user * optlen);
 
-static int VSockVmciDgramSendmsg(struct kiocb *kiocb,
-                                 struct socket *sock, struct msghdr *msg, size_t len);
-static int VSockVmciDgramRecvmsg(struct kiocb *kiocb, struct socket *sock,
-                                 struct msghdr *msg, size_t len, int flags);
-static int VSockVmciStreamSendmsg(struct kiocb *kiocb,
-                                 struct socket *sock, struct msghdr *msg, size_t len);
-static int VSockVmciStreamRecvmsg(struct kiocb *kiocb, struct socket *sock,
-                                 struct msghdr *msg, size_t len, int flags);
+static int VSockVmciDgramSendmsg(struct socket *sock, struct msghdr *msg, size_t len);
+static int VSockVmciDgramRecvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags);
+static int VSockVmciStreamSendmsg(struct socket *sock, struct msghdr *msg, size_t len);
+static int VSockVmciStreamRecvmsg(struct socket *sock, struct msghdr *msg, size_t len, int flags);
 
 static int VSockVmciCreate(
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 24)
@@ -2876,13 +2877,15 @@ __VSockVmciCreate(struct net *net,       // IN: Network namespace
     * network namespace, and the option to zero the sock was dropped.
     *
     */
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 12)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 2, 0)
+     sk = sk_alloc(net, vsockVmciFamilyOps.family, priority, &vsockVmciProto, 1);
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 12)
    sk = sk_alloc(vsockVmciFamilyOps.family, priority,
                  vsockVmciProto.slab_obj_size, vsockVmciProto.slab);
 #elif LINUX_VERSION_CODE < KERNEL_VERSION(2, 6, 24)
    sk = sk_alloc(vsockVmciFamilyOps.family, priority, &vsockVmciProto, 1);
 #else
-   sk = sk_alloc(net, vsockVmciFamilyOps.family, priority, &vsockVmciProto);
+   sk = sk_alloc(net, vsockVmciFamilyOps.family, priority, &vsockVmciProto, 0);
 #endif
    if (!sk) {
       return NULL;
@@ -3825,7 +3828,8 @@ outWaitError:
 static int
 VSockVmciAccept(struct socket *sock,     // IN
                 struct socket *newsock,  // IN/OUT
-                int flags)               // IN
+                int flags,               // IN
+                bool kern)               // IN
 {
    struct sock *listener;
    int err;
@@ -3930,7 +3934,9 @@ out:
 static int
 VSockVmciGetname(struct socket *sock,    // IN
                  struct sockaddr *addr,  // OUT
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 17, 0)
                  int *addrLen,           // OUT
+#endif
                  int peer)               // IN
 {
    int err;
@@ -3966,7 +3972,11 @@ VSockVmciGetname(struct socket *sock,    // IN
     */
    ASSERT_ON_COMPILE(sizeof *vmciAddr <= 128);
    memcpy(addr, vmciAddr, sizeof *vmciAddr);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 17, 0)
    *addrLen = sizeof *vmciAddr;
+#else
+   err = sizeof *vmciAddr;
+#endif
 
 out:
    release_sock(sk);
@@ -4260,8 +4270,7 @@ VSockVmciShutdown(struct socket *sock,  // IN
  */
 
 static int
-VSockVmciDgramSendmsg(struct kiocb *kiocb,          // UNUSED
-                      struct socket *sock,          // IN: socket to send on
+VSockVmciDgramSendmsg(struct socket *sock,          // IN: socket to send on
                       struct msghdr *msg,           // IN: message to send
                       size_t len)                   // IN: length of message
 {
@@ -4352,7 +4361,7 @@ VSockVmciDgramSendmsg(struct kiocb *kiocb,          // UNUSED
       goto out;
    }
 
-   memcpy_fromiovec(VMCI_DG_PAYLOAD(dg), msg->msg_iov, len);
+   memcpy_from_msg(VMCI_DG_PAYLOAD(dg), msg, len);
 
    dg->dst = VMCI_MAKE_HANDLE(remoteAddr->svm_cid, remoteAddr->svm_port);
    dg->src = VMCI_MAKE_HANDLE(vsk->localAddr.svm_cid, vsk->localAddr.svm_port);
@@ -4590,8 +4599,7 @@ VSockVmciStreamGetsockopt(struct socket *sock,          // IN
  */
 
 static int
-VSockVmciStreamSendmsg(struct kiocb *kiocb,          // UNUSED
-                       struct socket *sock,          // IN: socket to send on
+VSockVmciStreamSendmsg(struct socket *sock,          // IN: socket to send on
                        struct msghdr *msg,           // IN: message to send
                        size_t len)                   // IN: length of message
 {
@@ -4712,7 +4720,7 @@ VSockVmciStreamSendmsg(struct kiocb *kiocb,          // UNUSED
        * able to send.
        */
 
-      written = vmci_qpair_enquev(vsk->qpair, msg->msg_iov,
+      written = vmci_qpair_enquev(vsk->qpair, &msg->msg_iter.iov,
                                   len - totalWritten, 0);
       if (written < 0) {
          err = -ENOMEM;
@@ -4759,8 +4767,7 @@ out:
  */
 
 static int
-VSockVmciDgramRecvmsg(struct kiocb *kiocb,          // UNUSED
-                      struct socket *sock,          // IN: socket to receive from
+VSockVmciDgramRecvmsg(struct socket *sock,          // IN: socket to receive from
                       struct msghdr *msg,           // IN/OUT: message to receive into
                       size_t len,                   // IN: length of receive buffer
                       int flags)                    // IN: receive flags
@@ -4771,6 +4778,7 @@ VSockVmciDgramRecvmsg(struct kiocb *kiocb,          // UNUSED
    VMCIDatagram *dg;
    size_t payloadLen;
    struct sk_buff *skb;
+   struct iov_iter to;
 
    sk = sock->sk;
    noblock = flags & MSG_DONTWAIT;
@@ -4809,7 +4817,9 @@ VSockVmciDgramRecvmsg(struct kiocb *kiocb,          // UNUSED
    }
 
    /* Place the datagram payload in the user's iovec. */
-   err = skb_copy_datagram_iovec(skb, sizeof *dg, msg->msg_iov, payloadLen);
+   // err = skb_copy_datagram_iovec(skb, sizeof *dg, msg->msg_iter, payloadLen);
+   iov_iter_init(&to, READ, (struct iovec *)&msg->msg_iter.iov, 1, payloadLen);
+   err = skb_copy_datagram_iter(skb, 0, &to, payloadLen);
    if (err) {
       goto out;
    }
@@ -4850,8 +4860,7 @@ out:
  */
 
 static int
-VSockVmciStreamRecvmsg(struct kiocb *kiocb,          // UNUSED
-                       struct socket *sock,          // IN: socket to receive from
+VSockVmciStreamRecvmsg(struct socket *sock,          // IN: socket to receive from
                        struct msghdr *msg,           // IN/OUT: message to receive into
                        size_t len,                   // IN: length of receive buffer
                        int flags)                    // IN: receive flags
@@ -4955,9 +4964,9 @@ VSockVmciStreamRecvmsg(struct kiocb *kiocb,          // UNUSED
          }
 
          if (flags & MSG_PEEK) {
-            read = vmci_qpair_peekv(vsk->qpair, msg->msg_iov, len - copied, 0);
+            read = vmci_qpair_peekv(vsk->qpair, &msg->msg_iter.iov, len - copied, 0);
          } else {
-            read = vmci_qpair_dequev(vsk->qpair, msg->msg_iov, len - copied, 0);
+            read = vmci_qpair_dequev(vsk->qpair, &msg->msg_iter.iov, len - copied, 0);
          }
 
          if (read < 0) {
diff --git a/vsock-only/linux/notify.c b/vsock-only/linux/notify.c
index 5b1e134..a504138 100644
--- a/vsock-only/linux/notify.c
+++ b/vsock-only/linux/notify.c
@@ -516,7 +516,7 @@ VSockVmciHandleWrote(struct sock *sk,            // IN
    PKT_FIELD(vsk, sentWaitingRead) = FALSE;
 #endif
 
-   sk->sk_data_ready(sk, 0);
+   sk->sk_data_ready(sk);
 }
 
 
diff --git a/vsock-only/linux/notifyQState.c b/vsock-only/linux/notifyQState.c
index 7231f26..6f28aa4 100644
--- a/vsock-only/linux/notifyQState.c
+++ b/vsock-only/linux/notifyQState.c
@@ -164,7 +164,7 @@ VSockVmciHandleWrote(struct sock *sk,            // IN
                      struct sockaddr_vm *dst,    // IN: unused
                      struct sockaddr_vm *src)    // IN: unused
 {
-   sk->sk_data_ready(sk, 0);
+   sk->sk_data_ready(sk);
 }
 
 
@@ -566,7 +566,7 @@ VSockVmciNotifyPktRecvPostDequeue(struct sock *sk,               // IN
       }
 
       /* See the comment in VSockVmciNotifyPktSendPostEnqueue */
-      sk->sk_data_ready(sk, 0);
+      sk->sk_data_ready(sk);
    }
 
    return err;
diff --git a/vsock-only/shared/compat_uaccess.h b/vsock-only/shared/compat_uaccess.h
index d58ee05..641bd2b 100644
--- a/vsock-only/shared/compat_uaccess.h
+++ b/vsock-only/shared/compat_uaccess.h
@@ -21,7 +21,9 @@
 
 
 /* User space access functions moved in 2.1.7 to asm/uaccess.h --hpreg */
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 1, 7)
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 10, 0)
+#   include <linux/uaccess.h>
+#elif LINUX_VERSION_CODE >= KERNEL_VERSION(2, 1, 7)
 #   include <asm/uaccess.h>
 #else
 #   include <asm/segment.h>
diff --git a/vsock-only/shared/vmci_kernel_if.h b/vsock-only/shared/vmci_kernel_if.h
index a23ea50..1bb2940 100644
--- a/vsock-only/shared/vmci_kernel_if.h
+++ b/vsock-only/shared/vmci_kernel_if.h
@@ -109,7 +109,7 @@ extern "C" {
   typedef struct semaphore VMCIMutex;
   typedef PPN64 *VMCIPpnList; /* List of PPNs in produce/consume queue. */
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 5, 0)
-  typedef kuid_t VMCIHostUser;
+  typedef uid_t  VMCIHostUser;
 #else
   typedef uid_t VMCIHostUser;
 #endif
--- a/vmci-only/linux/driver.c	2019-03-22 00:10:40.166919472 +0100
+++ b/vmci-only/linux/driver.c.new	2019-03-22 00:11:52.528925103 +0100
@@ -1439,7 +1439,11 @@
 VMCIUserVAInvalidPointer(VA uva,      // IN:
                          size_t size) // IN:
 {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 0, 0)
    return !access_ok(VERIFY_WRITE, (void *)uva, size);
+#else
+   return !access_ok((void *)uva, size);
+#endif
 }
