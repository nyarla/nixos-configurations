diff --git a/pkgs/development/rocm-modules/6/amdsmi/default.nix b/pkgs/development/rocm-modules/6/amdsmi/default.nix
index 2b4db7be7..9ffc3a35c 100644
--- a/pkgs/development/rocm-modules/6/amdsmi/default.nix
+++ b/pkgs/development/rocm-modules/6/amdsmi/default.nix
@@ -15,18 +15,18 @@ let
   esmi_ib_src = fetchFromGitHub {
     owner = "amd";
     repo = "esmi_ib_library";
-    rev = "esmi_pkg_ver-3.0.3";
-    hash = "sha256-q0w5c5c+CpXkklmSyfzc+sbkt4cHNxscGJA3AXwvHxQ=";
+    rev = "esmi_pkg_ver-4.1.2";
+    hash = "sha256-wj3krY/6AdmnoNOSqN9EE/Yxbx++0AW2vu7dovQrQ9I=";
   };
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "amdsmi";
-  version = "6.3.3";
+  version = "rocm-6.4.1";
   src = fetchFromGitHub {
     owner = "rocm";
     repo = "amdsmi";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-hrPqd4ZWqzTG7JRfVwc1SZx6TNS0Q/LFg8yDxrM3mPo=";
+    hash = "sha256-K6FVvieJnOCfbyNNwOWs3t836ihtvELJvcCjXQoHuRY=";
   };
 
   postPatch = ''
@@ -34,20 +34,15 @@ stdenv.mkDerivation (finalAttrs: {
       --replace-fail "amd_smi)" ${"'"}''${AMD_SMI_TARGET})' \
       --replace-fail 'target_link_libraries(''${GOAMDSMI_SHIM_TARGET} -L' '#'
 
+    substituteInPlace CMakeLists.txt \
+      --replace-fail "if(NOT latest_esmi_tag STREQUAL current_esmi_tag)" "IF(FALSE)"
+
     # Manually unpack esmi_ib_src and add amd_hsmp.h so execute-process git clone doesn't run
     cp -rf --no-preserve=mode ${esmi_ib_src} ./esmi_ib_library
     mkdir -p ./esmi_ib_library/include/asm
     cp ./include/amd_smi/impl/amd_hsmp.h ./esmi_ib_library/include/asm/amd_hsmp.h
   '';
 
-  patches = [
-    # Fix ld.lld undefined reference: drmGetVersion
-    (fetchpatch {
-      url = "https://github.com/ROCm/amdsmi/commit/c3864bf6171970d86dc50fd23f06377736823997.patch";
-      hash = "sha256-zRG1tBD8sIQCWdKfCbXC/Z/6d6NTrRYvRpddPWdM4j8=";
-    })
-  ];
-
   nativeBuildInputs = [
     cmake
     pkg-config
@@ -67,6 +62,10 @@ stdenv.mkDerivation (finalAttrs: {
     "-DCMAKE_INSTALL_INCLUDEDIR=include"
   ];
 
+  makeWrapperArgs = [
+    "--set LD_LIBRARY_PATH ${libdrm}/lib"
+  ];
+
   postInstall = ''
     wrapPythonProgramsIn $out
     rm $out/bin/amd-smi
diff --git a/pkgs/development/rocm-modules/6/clr/default.nix b/pkgs/development/rocm-modules/6/clr/default.nix
index dca39f5be..558d373d5 100644
--- a/pkgs/development/rocm-modules/6/clr/default.nix
+++ b/pkgs/development/rocm-modules/6/clr/default.nix
@@ -46,16 +46,17 @@ let
     "--set HSA_PATH ${rocm-runtime}"
     "--set ROCM_PATH $out"
   ];
+
   amdclang = writeShellScriptBin "amdclang" ''
-    exec clang "$@"
+    exec clang --gcc-toolchain=${rocm-merged-llvm.libgcc} -I${rocm-merged-llvm.libgcc}/include "$@"
   '';
   amdclangxx = writeShellScriptBin "amdclang++" ''
-    exec clang++ "$@"
+    exec clang++ --gcc-toolchain=${rocm-merged-llvm.libgcc} -I${rocm-merged-llvm.libgcc}/include/c++ -I${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu -I${rocm-merged-llvm.libgcc}/include "$@"
   '';
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "clr";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs = [
     "out"
@@ -66,7 +67,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "clr";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-4qjfnn0kto2sNaSumXxHRHFrf3a3RZILOdhVSxkEs1I=";
+    hash = "sha256-MA9MS/HF3j5iqpFuatHQJZ+nNkcGgzCvpkiNO6CjoPg=";
   };
 
   nativeBuildInputs = [
@@ -125,27 +126,6 @@ stdenv.mkDerivation (finalAttrs: {
   patches = [
     ./cmake-find-x11-libgl.patch
 
-    (fetchpatch {
-      # Fix handling of old fatbin version https://github.com/ROCm/clr/issues/99
-      sha256 = "sha256-CK/QwgWJQEruiG4DqetF9YM0VEWpSiUMxAf1gGdJkuA=";
-      url = "https://src.fedoraproject.org/rpms/rocclr/raw/rawhide/f/0001-handle-v1-of-compressed-fatbins.patch";
-    })
-    (fetchpatch {
-      # improve rocclr isa compatibility check
-      sha256 = "sha256-wUrhpYN68AbEXeFU5f366C6peqHyq25kujJXY/bBJMs=";
-      url = "https://github.com/GZGavinZhao/clr/commit/22c17a0ac09c6b77866febf366591f669a1ed133.patch";
-    })
-    (fetchpatch {
-      # [PATCH] Improve hipamd compat check
-      sha256 = "sha256-uZQ8rMrWH61CCbxwLqQGggDmXFmYTi6x8OcgYPrZRC8=";
-      url = "https://github.com/GZGavinZhao/clr/commit/63c6ee630966744d4199fdfb854e98d2da9e1122.patch";
-    })
-    (fetchpatch {
-      # [PATCH] SWDEV-504340 - Move cast of cl_mem inside the condition
-      # Fixes crash due to UB in KernelBlitManager::setArgument
-      sha256 = "sha256-nL4CZ7EOXqsTVUtYhuu9DLOMpnMeMRUhkhylEQLTg9I=";
-      url = "https://github.com/ROCm/clr/commit/fa63919a6339ea2a61111981ba2362c97fbdf743.patch";
-    })
     (fetchpatch {
       # [PATCH] SWDEV-507104 - Removes alignment requirement for Semaphore class to resolve runtime misaligned memory issues
       sha256 = "sha256-nStJ22B/CM0fzQTvYjbHDbQt0GlE8DXxVK+UDU9BAx4=";
@@ -153,26 +133,34 @@ stdenv.mkDerivation (finalAttrs: {
     })
   ];
 
-  postPatch = ''
-    patchShebangs hipamd/*.sh
-    patchShebangs hipamd/src
+  postPatch =
+    let
+      cxxflags = "-I${rocm-merged-llvm.libgcc}/include/c++ -I${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu -I${rocm-merged-llvm.libgcc}/include";
+      include-paths = ''"${rocm-merged-llvm.libgcc}/include/c++" "${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu" "${rocm-merged-llvm.libgcc}/include"'';
+    in
+    ''
+      patchShebangs hipamd/*.sh
+      patchShebangs hipamd/src
 
-    # We're not on Windows so these are never installed to hipcc...
-    substituteInPlace hipamd/CMakeLists.txt \
-      --replace-fail "install(PROGRAMS \''${HIPCC_BIN_DIR}/hipcc.bat DESTINATION bin)" "" \
-      --replace-fail "install(PROGRAMS \''${HIPCC_BIN_DIR}/hipconfig.bat DESTINATION bin)" ""
+      # We're not on Windows so these are never installed to hipcc...
+      substituteInPlace hipamd/CMakeLists.txt \
+        --replace-fail "install(PROGRAMS \''${HIPCC_BIN_DIR}/hipcc.bat DESTINATION bin)" "" \
+        --replace-fail "install(PROGRAMS \''${HIPCC_BIN_DIR}/hipconfig.bat DESTINATION bin)" ""
 
-    substituteInPlace hipamd/src/hip_embed_pch.sh \
-      --replace-fail "\''$LLVM_DIR/bin/clang" "${hipClangPath}/clang"
+      substituteInPlace hipamd/src/hip_embed_pch.sh \
+        --replace-fail "\''$LLVM_DIR/bin/clang" "${hipClangPath}/clang" \
+        --replace-fail "-O3" "-O3 ${cxxflags}"
 
-    substituteInPlace opencl/khronos/icd/loader/icd_platform.h \
-      --replace-fail '#define ICD_VENDOR_PATH "/etc/OpenCL/vendors/";' \
-                     '#define ICD_VENDOR_PATH "/run/opengl-driver/etc/OpenCL/vendors/";'
+      substituteInPlace opencl/khronos/icd/loader/icd_platform.h \
+        --replace-fail '#define ICD_VENDOR_PATH "/etc/OpenCL/vendors/";' \
+                       '#define ICD_VENDOR_PATH "/run/opengl-driver/etc/OpenCL/vendors/";'
 
-    # new unbundler has better error messages, defaulting it on
-    substituteInPlace rocclr/utils/flags.hpp \
-      --replace-fail "HIP_ALWAYS_USE_NEW_COMGR_UNBUNDLING_ACTION, false" "HIP_ALWAYS_USE_NEW_COMGR_UNBUNDLING_ACTION, true"
-  '';
+      # new unbundler has better error messages, defaulting it on
+      substituteInPlace rocclr/utils/flags.hpp \
+        --replace-fail "HIP_ALWAYS_USE_NEW_COMGR_UNBUNDLING_ACTION, false" "HIP_ALWAYS_USE_NEW_COMGR_UNBUNDLING_ACTION, true"
+
+      sed -i "s|project(clr)|project(clr)\ninclude_directories(SYSTEM ${include-paths})|" CMakeLists.txt
+    '';
 
   postInstall = ''
     chmod +x $out/bin/*
@@ -237,6 +225,8 @@ stdenv.mkDerivation (finalAttrs: {
         "1100"
         "1101"
         "1102"
+        "1200"
+        "1201"
       ] (target: "gfx${target}");
 
       inherit hipClangPath;
diff --git a/pkgs/development/rocm-modules/6/composable_kernel/base.nix b/pkgs/development/rocm-modules/6/composable_kernel/base.nix
index 2ed9532ff..29fa699e9 100644
--- a/pkgs/development/rocm-modules/6/composable_kernel/base.nix
+++ b/pkgs/development/rocm-modules/6/composable_kernel/base.nix
@@ -25,6 +25,8 @@
       "gfx1100"
       "gfx1101"
       "gfx1102"
+      "gfx1200"
+      "gfx1201"
     ]
   ),
 }:
diff --git a/pkgs/development/rocm-modules/6/default.nix b/pkgs/development/rocm-modules/6/default.nix
index 0f4a83262..9a04f08e4 100644
--- a/pkgs/development/rocm-modules/6/default.nix
+++ b/pkgs/development/rocm-modules/6/default.nix
@@ -92,6 +92,8 @@ let
           ;
       };
 
+      hiprt = self.callPackage ./hiprt { };
+
       # hsakmt was merged into rocm-runtime
       hsakmt = self.rocm-runtime;
 
@@ -505,4 +507,8 @@ outer
     "gfx1101"
     "gfx1102"
   ];
+  gfx12 = scopeForArches [
+    "gfx1200"
+    "gfx1201"
+  ];
 }
diff --git a/pkgs/development/rocm-modules/6/half/default.nix b/pkgs/development/rocm-modules/6/half/default.nix
index 953152b37..7c77d2bcd 100644
--- a/pkgs/development/rocm-modules/6/half/default.nix
+++ b/pkgs/development/rocm-modules/6/half/default.nix
@@ -9,7 +9,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "half";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
diff --git a/pkgs/development/rocm-modules/6/hip-common/default.nix b/pkgs/development/rocm-modules/6/hip-common/default.nix
index a169c97ca..fc152b890 100644
--- a/pkgs/development/rocm-modules/6/hip-common/default.nix
+++ b/pkgs/development/rocm-modules/6/hip-common/default.nix
@@ -7,13 +7,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "hip-common";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "HIP";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-eKDbuG57KCg/nZpy+RcDsjyw0pP68qO9K/3ZpSPuMNw=";
+    hash = "sha256-2Iekju0t12c6iiqb104j+Lh53FvZwyqYtST12RkkuKc=";
   };
 
   dontConfigure = true;
diff --git a/pkgs/development/rocm-modules/6/hipblas-common/default.nix b/pkgs/development/rocm-modules/6/hipblas-common/default.nix
index 626c36833..a5296e87c 100644
--- a/pkgs/development/rocm-modules/6/hipblas-common/default.nix
+++ b/pkgs/development/rocm-modules/6/hipblas-common/default.nix
@@ -8,13 +8,13 @@
 }:
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipblas-common";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "hipBLAS-common";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-tvNz4ymQ1y3YSUQxAtNu2who79QzSKR+3JEevr+GDWo=";
+    hash = "sha256-eTwoAXH2HGdSAOLTZHJUFHF+c2wWHixqeMqr60KxJrc=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hipblas/default.nix b/pkgs/development/rocm-modules/6/hipblas/default.nix
index 22706ff56..4364540a4 100644
--- a/pkgs/development/rocm-modules/6/hipblas/default.nix
+++ b/pkgs/development/rocm-modules/6/hipblas/default.nix
@@ -2,7 +2,6 @@
   lib,
   stdenv,
   fetchFromGitHub,
-  fetchpatch,
   rocmUpdateScript,
   cmake,
   rocm-cmake,
@@ -23,7 +22,7 @@
 # Can also use cuBLAS
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipblas";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -43,18 +42,9 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipBLAS";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-Rz1KAhBUbvErHTF2PM1AkVhqo4OHldfSNMSpp5Tx9yk=";
+    hash = "sha256-lQv8Ik6+0ldqyeJ05CSGB0309nIpzlRL3CRYeQxVfd0=";
   };
 
-  patches = [
-    # https://github.com/ROCm/hipBLAS/pull/952
-    (fetchpatch {
-      name = "transitively-depend-hipblas-common.patch";
-      url = "https://github.com/ROCm/hipBLAS/commit/54220fdaebf0fb4fd0921ee9e418ace5b143ec8f.patch";
-      hash = "sha256-MFEhv8Bkrd2zD0FFIDg9oJzO7ztdyMAF+R9oYA0rmwQ=";
-    })
-  ];
-
   postPatch = ''
     substituteInPlace library/CMakeLists.txt \
       --replace-fail "find_package(Git REQUIRED)" ""
diff --git a/pkgs/development/rocm-modules/6/hipblaslt/default.nix b/pkgs/development/rocm-modules/6/hipblaslt/default.nix
index a5ab8ff2a..3d3eca607 100644
--- a/pkgs/development/rocm-modules/6/hipblaslt/default.nix
+++ b/pkgs/development/rocm-modules/6/hipblaslt/default.nix
@@ -20,6 +20,7 @@
   libffi,
   zlib,
   zstd,
+  rocm-merged-llvm,
   rocmUpdateScript,
   buildTests ? false,
   buildBenchmarks ? false,
@@ -55,21 +56,22 @@ stdenv.mkDerivation (
     ]);
     gpuTargets' = lib.optionalString supportsTargetArches (lib.concatStringsSep ";" gpuTargets);
     compiler = "amdclang++";
-    cFlags = "-O3 -I${msgpack}/include"; # FIXME: cmake files need patched to include this properly
+    cFlags = "-O3 -I${msgpack}/include -I${rocm-merged-llvm.libgcc}/include/c++ -I${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu -I${rocm-merged-llvm.libgcc}/include"; # FIXME: cmake files need patched to include this properly
   in
   {
     pname = "hipblaslt${clr.gpuArchSuffix}";
-    version = "6.3.3";
+    version = "6.4.1";
 
     src = fetchFromGitHub {
       owner = "ROCm";
       repo = "hipBLASLt";
       rev = "rocm-${finalAttrs.version}";
-      hash = "sha256-ozfHwsxcczzYXN9SIkyfRvdtaCqlDN4bh3UHZNS2oVQ=";
+      hash = "sha256-ojNa3jt5285gsPwo4icATJD9JdxmbJBjfCF4A1ttCQ4=";
     };
     env.CXX = compiler;
     env.CFLAGS = cFlags;
     env.CXXFLAGS = cFlags;
+    env.CPPFLAGS = cFlags;
     env.ROCM_PATH = "${clr}";
     env.TENSILE_ROCM_ASSEMBLER_PATH = lib.getExe' clr "amdclang++";
     env.TENSILE_GEN_ASSEMBLY_TOOLCHAIN = lib.getExe' clr "amdclang++";
@@ -107,7 +109,8 @@ stdenv.mkDerivation (
       substituteInPlace library/src/amd_detail/rocblaslt/src/CMakeLists.txt \
         --replace-fail 'TensileCreateExtOpLibraries("' '# skipping TensileCreateExtOpLibraries'
       substituteInPlace library/src/amd_detail/rocblaslt/src/kernels/compile_code_object.sh \
-        --replace-fail '${"\${rocm_path}"}/bin/' ""
+        --replace-fail '${"\${rocm_path}"}/bin/' "" \
+        --replace-fail 'additional_options="-O3"' 'additional_options="-O3 ${cFlags}"'
     '';
 
     # Apply patches to allow building without a target arch if we need to do that
diff --git a/pkgs/development/rocm-modules/6/hipcub/default.nix b/pkgs/development/rocm-modules/6/hipcub/default.nix
index d51b5b36b..ca6f38847 100644
--- a/pkgs/development/rocm-modules/6/hipcub/default.nix
+++ b/pkgs/development/rocm-modules/6/hipcub/default.nix
@@ -17,7 +17,7 @@
 # CUB can also be used as a backend instead of rocPRIM.
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipcub";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -34,7 +34,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipCUB";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-uECOQWG9C64tg5YZdm9/3+fZXaZVGslu8vElK3m23GY=";
+    hash = "sha256-pwCAsRx5XyuCvppTmZ4VG83iYl9ilAQCZds4oKINhSI=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hipfft/default.nix b/pkgs/development/rocm-modules/6/hipfft/default.nix
index 80c21f158..f6bfaf7d3 100644
--- a/pkgs/development/rocm-modules/6/hipfft/default.nix
+++ b/pkgs/development/rocm-modules/6/hipfft/default.nix
@@ -22,7 +22,7 @@
 # Can also use cuFFT
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipfft";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -42,7 +42,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipFFT";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-Jq/YHEtOo7a0/Ki7gxZATKmSqPU6cyLf5gx3A4MAZNw=";
+    hash = "sha256-VA9OC/TvvQyFCVVox/9ihuE2W0Ia87O0R3YsLM4Jzuk=";
     fetchSubmodules = true;
   };
 
diff --git a/pkgs/development/rocm-modules/6/hipfort/default.nix b/pkgs/development/rocm-modules/6/hipfort/default.nix
index d3916bf6d..bad42cc9f 100644
--- a/pkgs/development/rocm-modules/6/hipfort/default.nix
+++ b/pkgs/development/rocm-modules/6/hipfort/default.nix
@@ -10,13 +10,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipfort";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "hipfort";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-V5XDNM0bYHKnpkcnaDyxIS1zwsgaByJj+znFxJ6VxR0=";
+    hash = "sha256-a2YPGAWP+gF2EykpKmkG/fEIW6blm2ChOybmLAHQQdw=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hipify/default.nix b/pkgs/development/rocm-modules/6/hipify/default.nix
index 8747dba16..4b14f0a9a 100644
--- a/pkgs/development/rocm-modules/6/hipify/default.nix
+++ b/pkgs/development/rocm-modules/6/hipify/default.nix
@@ -14,13 +14,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipify";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "HIPIFY";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-o/1LNsNtAyQcSug1gf7ujGNRRbvC33kwldrJKZi2LA0=";
+    hash = "sha256-uj25WmGCpwouS1yzW9Oil5Vyrbyj5yRITvWF9WaGozM=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hiprand/default.nix b/pkgs/development/rocm-modules/6/hiprand/default.nix
index f32f4e508..c65fe3d99 100644
--- a/pkgs/development/rocm-modules/6/hiprand/default.nix
+++ b/pkgs/development/rocm-modules/6/hiprand/default.nix
@@ -14,7 +14,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "hiprand";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -28,7 +28,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipRAND";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-TVc+qFwRiS5tAo1OKI1Wu5hadlwPZmSVZ9SvVvH1w7Y=";
+    hash = "sha256-ISl4bVW/JvT81gJ/10JlKliv7ds5WtP2f/Dnc9qvh9Q=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hiprt/default.nix b/pkgs/development/rocm-modules/6/hiprt/default.nix
new file mode 100644
index 000000000..2c5ca2c27
--- /dev/null
+++ b/pkgs/development/rocm-modules/6/hiprt/default.nix
@@ -0,0 +1,66 @@
+{
+  clr,
+  cmake,
+  fetchFromGitHub,
+  hipcc,
+  lib,
+  python3Packages,
+  rocm-merged-llvm,
+  rocm-cmake,
+  stdenv,
+}:
+
+stdenv.mkDerivation (finalAttrs: {
+  pname = "hiprt";
+  version = "2.5.a21e075.3";
+
+  src = fetchFromGitHub {
+    owner = "GPUOpen-LibrariesAndSDKs";
+    repo = "HIPRT";
+    tag = finalAttrs.version;
+    hash = "sha256-3yGhwIsFHlFMCEzuYnXuXNzs99m7f2LTkYaTGs0GEcI=";
+    fetchSubmodules = true;
+  };
+
+  postPatch = ''
+    clang++ $CXXFLAGS contrib/easy-encryption/cl.cpp -o contrib/easy-encryption/bin/linux/ee64 #replacing prebuilt binary
+
+    substituteInPlace scripts/bitcodes/compile.py \
+      --replace-fail "-O3" "-O3 $CXXFLAGS"
+  '';
+
+  nativeBuildInputs = [
+    clr
+    cmake
+    hipcc
+    python3Packages.python
+    rocm-cmake
+    rocm-merged-llvm
+  ];
+
+  cmakeFlags = [
+    "-DCMAKE_BUILD_TYPE=Release"
+    "-DBAKE_KERNEL=OFF"
+    "-DBAKE_COMPILED_KERNEL=OFF"
+    "-DBITCODE=ON"
+    "-DPRECOMPILE=ON"
+    "-DNO_UNITTEST=ON"
+    "-DFORCE_DISABLE_CUDA=ON"
+  ];
+
+  postInstall = ''
+    mv $out/bin $out/lib
+    ln -sr $out/lib/libhiprt*64.so $out/lib/libhiprt64.so
+    install -v -Dm644 ../scripts/bitcodes/hiprt*_amd_lib_linux.bc $out/lib/
+  '';
+
+  meta = {
+    homepage = "https://gpuopen.com/hiprt";
+    description = "Ray tracing library for HIP";
+    license = lib.licenses.mit;
+    maintainers = with lib.maintainers; [
+      mksafavi
+    ];
+    platforms = lib.platforms.linux;
+  };
+})
diff --git a/pkgs/development/rocm-modules/6/hipsolver/default.nix b/pkgs/development/rocm-modules/6/hipsolver/default.nix
index dbc0b0c43..981f59151 100644
--- a/pkgs/development/rocm-modules/6/hipsolver/default.nix
+++ b/pkgs/development/rocm-modules/6/hipsolver/default.nix
@@ -21,7 +21,7 @@
 # Can also use cuSOLVER
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipsolver";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -41,7 +41,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipSOLVER";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-ZQUKU3L4DgZ5zM7pCYEix0ulRkl78x/5wJnyCndTAwk=";
+    hash = "sha256-4ig8/P7JQCx3WB+PRHlhSlRhzdbnDo8QrFnWxsxJdwk=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/hipsparse/default.nix b/pkgs/development/rocm-modules/6/hipsparse/default.nix
index 5a318c7fe..c89bed134 100644
--- a/pkgs/development/rocm-modules/6/hipsparse/default.nix
+++ b/pkgs/development/rocm-modules/6/hipsparse/default.nix
@@ -20,7 +20,7 @@
 # This can also use cuSPARSE as a backend instead of rocSPARSE
 stdenv.mkDerivation (finalAttrs: {
   pname = "hipsparse";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -37,7 +37,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "hipSPARSE";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-3a7fKpYyiqG3aGOg7YrTHmKoH4rgTVLD16DvrZ3YY1g=";
+    hash = "sha256-pRR/3t7YXgtPQwGFb5lA6DI2OTF6AnDcfkydRIEod2Q=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/llvm/compiler-rt-rtsan-fix.patch b/pkgs/development/rocm-modules/6/llvm/compiler-rt-rtsan-fix.patch
new file mode 100644
index 000000000..32b97e18a
--- /dev/null
+++ b/pkgs/development/rocm-modules/6/llvm/compiler-rt-rtsan-fix.patch
@@ -0,0 +1,31 @@
+--- a/lib/rtsan/rtsan_interceptors.cpp	2025-06-25 15:56:06.895841231 +0900
++++ b/lib/rtsan/rtsan_interceptors.cpp	2025-06-25 15:56:52.880451519 +0900
+@@ -69,20 +69,6 @@
+   return result;
+ }
+
+-INTERCEPTOR(int, openat, int fd, const char *path, int oflag, ...) {
+-  // TODO Establish whether we should intercept here if the flag contains
+-  // O_NONBLOCK
+-  ExpectNotRealtime("openat");
+-
+-  va_list args;
+-  va_start(args, oflag);
+-  mode_t mode = va_arg(args, int);
+-  va_end(args);
+-
+-  const int result = REAL(openat)(fd, path, oflag, mode);
+-  return result;
+-}
+-
+ INTERCEPTOR(int, creat, const char *path, mode_t mode) {
+   // TODO Establish whether we should intercept here if the flag contains
+   // O_NONBLOCK
+@@ -385,7 +371,6 @@
+ #endif
+
+   INTERCEPT_FUNCTION(open);
+-  INTERCEPT_FUNCTION(openat);
+   INTERCEPT_FUNCTION(close);
+   INTERCEPT_FUNCTION(fopen);
+   INTERCEPT_FUNCTION(fread);
diff --git a/pkgs/development/rocm-modules/6/llvm/default.nix b/pkgs/development/rocm-modules/6/llvm/default.nix
index c41748056..d7923137e 100644
--- a/pkgs/development/rocm-modules/6/llvm/default.nix
+++ b/pkgs/development/rocm-modules/6/llvm/default.nix
@@ -1,7 +1,7 @@
 {
   lib,
   stdenv,
-  llvmPackages_18,
+  llvmPackages_19,
   overrideCC,
   rocm-device-libs,
   rocm-runtime,
@@ -28,7 +28,7 @@
 }:
 
 let
-  llvmPackagesNoBintools = llvmPackages_18.override {
+  llvmPackagesNoBintools = llvmPackages_19.override {
     bootBintools = null;
     bootBintoolsNoLibc = null;
   };
@@ -37,7 +37,7 @@ let
   llvmStdenv = overrideCC llvmPackagesNoBintools.libcxxStdenv llvmPackagesNoBintools.clangUseLLVM;
   llvmLibstdcxxStdenv = overrideCC llvmPackagesNoBintools.stdenv (
     llvmPackagesNoBintools.libstdcxxClang.override {
-      inherit (llvmPackages_18) bintools;
+      inherit (llvmPackages_19) bintools;
     }
   );
   stdenvToBuildRocmLlvm = if useLibcxx then llvmStdenv else llvmLibstdcxxStdenv;
@@ -88,9 +88,9 @@ let
         ln -s $out $out/x86_64-unknown-linux-gnu
       '';
     };
-  version = "6.3.1";
+  version = "6.4.1";
   # major version of this should be the clang version ROCm forked from
-  rocmLlvmVersion = "18.0.0-${llvmSrc.rev}";
+  rocmLlvmVersion = "19.0.0-${llvmSrc.rev}";
   usefulOutputs =
     drv:
     builtins.filter (x: x != null) [
@@ -102,16 +102,16 @@ let
   llvmSrc = fetchFromGitHub {
     # Performance improvements cherry-picked on top of rocm-6.3.x
     # most importantly, amdgpu-early-alwaysinline memory usage fix
-    owner = "LunNova";
-    repo = "llvm-project-rocm";
-    rev = "4182046534deb851753f0d962146e5176f648893";
-    hash = "sha256-sPmYi1WiiAqnRnHVNba2nPUxGflBC01FWCTNLPlYF9c=";
+    owner = "ROCm";
+    repo = "llvm-project";
+    rev = "rocm-6.4.1";
+    hash = "sha256-84+ZsKjIhXip2yLU5jpoV53+ejxy2dzgamVU6AcAngU=";
   };
   llvmSrcFixed = llvmSrc;
   llvmMajorVersion = lib.versions.major rocmLlvmVersion;
   # An llvmPackages (pkgs/development/compilers/llvm/) built from ROCm LLVM's source tree
   # optionally using LLVM libcxx
-  llvmPackagesRocm = llvmPackages_18.override (_old: {
+  llvmPackagesRocm = llvmPackages_19.override (_old: {
     stdenv = stdenvToBuildRocmLlvm; # old.stdenv #llvmPackagesNoBintools.libcxxStdenv;
 
     # not setting gitRelease = because that causes patch selection logic to use git patches
@@ -147,6 +147,13 @@ let
         rm -rf $out/lib64
         echo 'export CC=clang' >> $out/nix-support/setup-hook
         echo 'export CXX=clang++' >> $out/nix-support/setup-hook
+
+        ${lib.optionalString (!useLibcxx) ''
+          echo 'export CFLAGS="''${CFLAGS:-} --gcc-toolchain=${gcc-prefix} -I${gcc-prefix}/include"' >> $out/nix-support/setup-hook
+          echo 'export CXXFLAGS="''${CXXFLAGS:-} --gcc-toolchain=${gcc-prefix} -I${gcc-prefix}/include/c++ -I${gcc-prefix}/include/c++/x86_64-unknown-linux-gnu -I${gcc-prefix}/include"' >> $out/nix-support/setup-hook
+          echo 'export CPPFLAGS="''${CPPFLAGS:-} --gcc-toolchain=${gcc-prefix} -I${gcc-prefix}/include/c++ -I${gcc-prefix}/include/c++/x86_64-unknown-linux-gnu -I${gcc-prefix}/include"' >> $out/nix-support/setup-hook
+        ''}
+
         mkdir -p $out/lib/clang/${llvmMajorVersion}/lib/linux/
         ln -s $out/lib/linux/libclang_rt.* $out/lib/clang/${llvmMajorVersion}/lib/linux/
 
@@ -163,6 +170,7 @@ let
     (
       (lib.strings.hasSuffix "add-nostdlibinc-flag.patch" (builtins.baseNameOf x))
       || (lib.strings.hasSuffix "clang-at-least-16-LLVMgold-path.patch" (builtins.baseNameOf x))
+      || (lib.strings.hasSuffix "gnu-install-dirs.patch" (builtins.baseNameOf x))
     );
   llvmTargetsFlag = "-DLLVM_TARGETS_TO_BUILD=AMDGPU;${
     {
@@ -198,6 +206,15 @@ rec {
       zlib
     ];
     env.NIX_BUILD_ID_STYLE = "fast";
+
+    patches = old.patches ++ [
+      (fetchpatch {
+        url = "https://gitlab.archlinux.org/archlinux/packaging/packages/rocm-llvm/-/raw/7f4fe84a5e9a17b21172879e6d3e29545da67aa7/rocm-llvm-6.4-llvm-gold-plugin-fix-ModuleName.patch";
+        hash = "sha256-X+1g0C7VcNG0tIgNYlFQy6z+phEaRZPUjgc7H3Sdpnc=";
+        stripLen = 1;
+      })
+    ];
+
     postPatch = ''
       ${old.postPatch or ""}
       patchShebangs lib/OffloadArch/make_generated_offload_arch_h.sh
@@ -242,6 +259,8 @@ rec {
       find $lib -type f -exec remove-references-to -t ${stdenvToBuildRocmLlvm.cc} {} +
       find $lib -type f -exec remove-references-to -t ${stdenv.cc.bintools} {} +
     '';
+
+    doCheck = false;
   });
   lld =
     (llvmPackagesRocm.lld.override {
@@ -332,6 +351,7 @@ rec {
             (replaceVars ./../../../compilers/llvm/common/clang/clang-at-least-16-LLVMgold-path.patch {
               libllvmLibdir = "${llvm.lib}/lib";
             })
+            ./gnu-install-dirs.patch
           ];
           nativeBuildInputs = old.nativeBuildInputs ++ [
             llvmPackagesNoBintools.lld
@@ -373,10 +393,6 @@ rec {
               "-DLLVM_ENABLE_LIBCXX=ON"
               "-DLLVM_USE_LINKER=lld"
               "-DCLANG_DEFAULT_RTLIB=compiler-rt"
-            ]
-            ++ lib.optionals (!useLibcxx) [
-              # FIXME: Config file in rocmcxx instead of GCC_INSTALL_PREFIX?
-              "-DGCC_INSTALL_PREFIX=${gcc-prefix}"
             ];
           postFixup =
             (old.postFixup or "")
@@ -432,14 +448,28 @@ rec {
     inherit clang-unwrapped clang;
   };
   compiler-rt-libc = llvmPackagesRocm.compiler-rt-libc.overrideAttrs (old: {
-    patches = old.patches ++ [
-      (fetchpatch {
-        name = "Fix-missing-main-function-in-float16-bfloat16-support-checks.patch";
-        url = "https://github.com/ROCm/llvm-project/commit/68d8b3846ab1e6550910f2a9a685690eee558af2.patch";
-        hash = "sha256-Db+L1HFMWVj4CrofsGbn5lnMoCzEcU+7q12KKFb17/g=";
-        relative = "compiler-rt";
-      })
-    ];
+    patches =
+      (builtins.filter (
+        x: !(lib.strings.hasSuffix "armv6-scudo-libatomic.patch" (builtins.baseNameOf x))
+      ) old.patches)
+      ++ [
+        (fetchpatch {
+          name = "Fix-missing-main-function-in-float16-bfloat16-support-checks.patch";
+          url = "https://github.com/ROCm/llvm-project/commit/68d8b3846ab1e6550910f2a9a685690eee558af2.patch";
+          hash = "sha256-Db+L1HFMWVj4CrofsGbn5lnMoCzEcU+7q12KKFb17/g=";
+          relative = "compiler-rt";
+        })
+        ./compiler-rt-rtsan-fix.patch
+      ];
+
+    postPatch =
+      builtins.replaceStrings
+        [
+          "substituteInPlace cmake/Modules/AddCompilerRT.cmake"
+          ''--replace-fail 'find_program(CODESIGN codesign)' ""''
+        ]
+        [ "" "" ]
+        old.postPatch;
   });
   compiler-rt = compiler-rt-libc;
   bintools = wrapBintoolsWith {
@@ -451,44 +481,48 @@ rec {
   clang = rocmcxx;
 
   # Emulate a monolithic ROCm LLVM build to support building ROCm's in-tree LLVM projects
-  rocm-merged-llvm = symlinkJoin {
-    name = "rocm-llvm-merge";
-    paths =
-      [
-        llvm
-        llvm.dev
-        lld
-        lld.lib
-        lld.dev
-        libunwind
-        libunwind.dev
-        compiler-rt
-        compiler-rt.dev
-        rocmcxx
-      ]
-      ++ lib.optionals useLibcxx [
-        libcxx
-        libcxx.out
-        libcxx.dev
-      ];
-    postBuild = builtins.unsafeDiscardStringContext ''
-      found_files=$(find $out -name '*.cmake')
-      if [ -z "$found_files" ]; then
-          >&2 echo "Error: No CMake files found in $out"
-          exit 1
-      fi
-
-      for target in ${clang-unwrapped.out} ${clang-unwrapped.lib} ${clang-unwrapped.dev}; do
-        if grep "$target" $found_files; then
-            >&2 echo "Unexpected ref to $target (clang-unwrapped) found"
-            # exit 1
-            # # FIXME: enable this to reduce closure size
+  rocm-merged-llvm =
+    symlinkJoin {
+      name = "rocm-llvm-merge";
+      paths =
+        [
+          llvm
+          llvm.dev
+          lld
+          lld.lib
+          lld.dev
+          libunwind
+          libunwind.dev
+          compiler-rt
+          compiler-rt.dev
+          rocmcxx
+        ]
+        ++ lib.optionals useLibcxx [
+          libcxx
+          libcxx.out
+          libcxx.dev
+        ];
+      postBuild = builtins.unsafeDiscardStringContext ''
+        found_files=$(find $out -name '*.cmake')
+        if [ -z "$found_files" ]; then
+            >&2 echo "Error: No CMake files found in $out"
+            exit 1
         fi
-      done
-    '';
-    inherit version;
-    llvm-src = llvmSrc;
-  };
+
+        for target in ${clang-unwrapped.out} ${clang-unwrapped.lib} ${clang-unwrapped.dev}; do
+          if grep "$target" $found_files; then
+              >&2 echo "Unexpected ref to $target (clang-unwrapped) found"
+              # exit 1
+              # # FIXME: enable this to reduce closure size
+          fi
+        done
+      '';
+      inherit version;
+      llvm-src = llvmSrc;
+    }
+    // {
+      libgcc = gcc-prefix;
+    };
 
   rocmClangStdenv = overrideCC (
     if useLibcxx then llvmPackagesRocm.libcxxStdenv else llvmPackagesRocm.stdenv
@@ -527,5 +561,6 @@ rec {
           libxml2
           libffi
         ];
+        patches = (old.patches or [ ]) ++ [ ./openmp.patch ];
       });
 }
diff --git a/pkgs/development/rocm-modules/6/llvm/gnu-install-dirs.patch b/pkgs/development/rocm-modules/6/llvm/gnu-install-dirs.patch
new file mode 100644
index 000000000..5f5a98144
--- /dev/null
+++ b/pkgs/development/rocm-modules/6/llvm/gnu-install-dirs.patch
@@ -0,0 +1,40 @@
+diff --git a/cmake/modules/AddClang.cmake b/cmake/modules/AddClang.cmake
+index 75b0080f6..c895b884c 100644
+--- a/cmake/modules/AddClang.cmake
++++ b/cmake/modules/AddClang.cmake
+@@ -119,8 +119,8 @@ macro(add_clang_library name)
+         install(TARGETS ${lib}
+           COMPONENT ${lib}
+           ${export_to_clangtargets}
+-          LIBRARY DESTINATION lib${LLVM_LIBDIR_SUFFIX}
+-          ARCHIVE DESTINATION lib${LLVM_LIBDIR_SUFFIX}
++          LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}${LLVM_LIBDIR_SUFFIX}"
++          ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}${LLVM_LIBDIR_SUFFIX}"
+           RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}")
+ 
+         if (NOT LLVM_ENABLE_IDE)
+diff --git a/lib/Headers/CMakeLists.txt b/lib/Headers/CMakeLists.txt
+index e6ae4e19e..5ef01aea2 100644
+--- a/lib/Headers/CMakeLists.txt
++++ b/lib/Headers/CMakeLists.txt
+@@ -337,6 +337,7 @@ set(llvm_libc_wrapper_files
+ 
+ include(GetClangResourceDir)
+ get_clang_resource_dir(output_dir PREFIX ${LLVM_LIBRARY_OUTPUT_INTDIR}/.. SUBDIR include)
++set(header_install_dir ${CMAKE_INSTALL_LIBDIR}${LLVM_LIBDIR_SUFFIX}/clang/${CLANG_VERSION_MAJOR}/include)
+ set(out_files)
+ set(generated_files)
+ 
+diff --git a/tools/libclang/CMakeLists.txt b/tools/libclang/CMakeLists.txt
+index b5b6d2807..6b592d255 100644
+--- a/tools/libclang/CMakeLists.txt
++++ b/tools/libclang/CMakeLists.txt
+@@ -246,7 +246,7 @@ foreach(PythonVersion ${CLANG_PYTHON_BINDINGS_VERSIONS})
+           COMPONENT
+             libclang-python-bindings
+           DESTINATION
+-            "lib${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages")
++            "${CMAKE_INSTALL_LIBDIR}${LLVM_LIBDIR_SUFFIX}/python${PythonVersion}/site-packages")
+ endforeach()
+ if(NOT LLVM_ENABLE_IDE)
+   add_custom_target(libclang-python-bindings)
diff --git a/pkgs/development/rocm-modules/6/llvm/openmp.patch b/pkgs/development/rocm-modules/6/llvm/openmp.patch
new file mode 100644
index 000000000..b24948386
--- /dev/null
+++ b/pkgs/development/rocm-modules/6/llvm/openmp.patch
@@ -0,0 +1,24 @@
+--- openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h.orig	2025-06-26 19:45:41.562575489 +0900
++++ openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h	2025-06-26 20:10:31.166337737 +0900
+@@ -370,21 +370,7 @@
+   return __TBB_machine_fetchadd4(ptr, 1) + 1L;
+ }
+ #endif /* ITT_SIMPLE_INIT */
+-
+-void *dlopen(const char *, int) __attribute__((weak));
+-void *dlsym(void *, const char *) __attribute__((weak));
+-int dlclose(void *) __attribute__((weak));
+ #define DL_SYMBOLS (dlopen && dlsym && dlclose)
+-
+-int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *)
+-    __attribute__((weak));
+-int pthread_mutex_lock(pthread_mutex_t *) __attribute__((weak));
+-int pthread_mutex_unlock(pthread_mutex_t *) __attribute__((weak));
+-int pthread_mutex_destroy(pthread_mutex_t *) __attribute__((weak));
+-int pthread_mutexattr_init(pthread_mutexattr_t *) __attribute__((weak));
+-int pthread_mutexattr_settype(pthread_mutexattr_t *, int) __attribute__((weak));
+-int pthread_mutexattr_destroy(pthread_mutexattr_t *) __attribute__((weak));
+-pthread_t pthread_self(void) __attribute__((weak));
+ #define PTHREAD_SYMBOLS                                                        \
+   (pthread_mutex_init && pthread_mutex_lock && pthread_mutex_unlock &&         \
+    pthread_mutex_destroy && pthread_mutexattr_init &&                          \
diff --git a/pkgs/development/rocm-modules/6/migraphx/default.nix b/pkgs/development/rocm-modules/6/migraphx/default.nix
index 54620d320..d52fdba7b 100644
--- a/pkgs/development/rocm-modules/6/migraphx/default.nix
+++ b/pkgs/development/rocm-modules/6/migraphx/default.nix
@@ -63,7 +63,7 @@ let
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "migraphx";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -80,7 +80,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "AMDMIGraphX";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-h9cTbrMwHeRGVJS/uHQnCXplNcrBqxbhwz2AcAEso0M=";
+    hash = "sha256-PytBEnLBHyp0JzkSLbLRHslqGBk4mabKC62JZoXwHxE=";
   };
 
   nativeBuildInputs =
diff --git a/pkgs/development/rocm-modules/6/miopen/default.nix b/pkgs/development/rocm-modules/6/miopen/default.nix
index b8e072b9c..19d1140aa 100644
--- a/pkgs/development/rocm-modules/6/miopen/default.nix
+++ b/pkgs/development/rocm-modules/6/miopen/default.nix
@@ -54,13 +54,13 @@
 let
   # FIXME: cmake files need patched to include this properly
   cFlags = "-O3 -DNDEBUG -Wno-documentation-pedantic --offload-compress -I${hipblas-common}/include  -I${hipblas}/include -I${roctracer}/include -I${nlohmann_json}/include -I${sqlite.dev}/include -I${rocrand}/include";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "MIOpen";
     rev = "rocm-${version}";
-    hash = "sha256-rX+BE6wBDMnLyc6eai3bDVvmfahomDO0s10n6HhWu7c=";
+    hash = "sha256-DEcVj2vOwIYYyNKEKFqZ0fb9o+/QRpwiSksxwnmgEMc=";
     fetchLFS = true;
     fetchSubmodules = true;
     # WORKAROUND: .lfsconfig is incorrectly set to exclude everything upstream
diff --git a/pkgs/development/rocm-modules/6/mivisionx/default.nix b/pkgs/development/rocm-modules/6/mivisionx/default.nix
index 34d1fadc2..ed54a30bb 100644
--- a/pkgs/development/rocm-modules/6/mivisionx/default.nix
+++ b/pkgs/development/rocm-modules/6/mivisionx/default.nix
@@ -42,13 +42,13 @@ stdenv.mkDerivation (finalAttrs: {
         "cpu"
     );
 
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "MIVisionX";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-SisCbUDCAiWQ1Ue7qrtoT6vO/1ztzqji+3cJD6MXUNw=";
+    hash = "sha256-07MivgCYmKLnhGDjOYsFBfwIxEoQLYNoRbOo3MPpVzE=";
   };
 
   patches = [
diff --git a/pkgs/development/rocm-modules/6/rccl/default.nix b/pkgs/development/rocm-modules/6/rccl/default.nix
index c74c6287c..02f99ddd4 100644
--- a/pkgs/development/rocm-modules/6/rccl/default.nix
+++ b/pkgs/development/rocm-modules/6/rccl/default.nix
@@ -34,7 +34,7 @@ in
 # infiniband ib_peer_mem support isn't in the mainline kernel but is carried by some distros
 stdenv.mkDerivation (finalAttrs: {
   pname = "rccl${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -54,7 +54,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rccl";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-998tDiC0Qp9hhcXtFpiCWqwdKPVT2vNp0GU/rng03Bw=";
+    hash = "sha256-6lQBpoJKszgvt+UpNEKdiw74s3ZhC4zpA4HP+F6u7X4=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rdc/default.nix b/pkgs/development/rocm-modules/6/rdc/default.nix
index a19f2c9aa..5af566ebc 100644
--- a/pkgs/development/rocm-modules/6/rdc/default.nix
+++ b/pkgs/development/rocm-modules/6/rdc/default.nix
@@ -48,7 +48,7 @@ let
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "rdc";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -65,7 +65,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rdc";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-s/31b8/Kn5l1QJ941UMSB8SCzpvODsPfOLMmEBUYYmY=";
+    hash = "sha256-HkGumwag7mDERHiWwZ7cRQz0tzH+vIovY1HgX2g69d4=";
   };
 
   nativeBuildInputs =
diff --git a/pkgs/development/rocm-modules/6/rocalution/default.nix b/pkgs/development/rocm-modules/6/rocalution/default.nix
index 785a2f467..19083935b 100644
--- a/pkgs/development/rocm-modules/6/rocalution/default.nix
+++ b/pkgs/development/rocm-modules/6/rocalution/default.nix
@@ -23,7 +23,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocalution";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -43,7 +43,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocALUTION";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-xdZ3HUiRGsreHfJH8RgL/s3jGyC5ABmBKcEfgtqWg8Y=";
+    hash = "sha256-bZx1Cc2jcIfysohKCKzj5mowM3IeCelRhVaBU73KnTo=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocblas/default.nix b/pkgs/development/rocm-modules/6/rocblas/default.nix
index 2b110e0f1..044999d14 100644
--- a/pkgs/development/rocm-modules/6/rocblas/default.nix
+++ b/pkgs/development/rocm-modules/6/rocblas/default.nix
@@ -21,9 +21,12 @@
   hipblaslt,
   python3Packages,
   rocm-smi,
+  rocm-merged-llvm,
+  roctracer,
+  libdrm,
   buildTensile ? true,
-  buildTests ? true,
-  buildBenchmarks ? true,
+  buildTests ? false,
+  buildBenchmarks ? false,
   # https://github.com/ROCm/Tensile/issues/1757
   # Allows gfx101* users to use rocBLAS normally.
   # Turn the below two values to `true` after the fix has been cherry-picked
@@ -52,16 +55,19 @@
       "gfx1100"
       "gfx1101"
       "gfx1102"
+      "gfx1200"
+      "gfx1201"
     ]
   ),
 }:
 
 let
   gpuTargets' = lib.concatStringsSep ";" gpuTargets;
+  cxxflags = " -I${msgpack}/include -I${rocm-merged-llvm.libgcc}/include/c++ -I${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu -I${rocm-merged-llvm.libgcc}/include";
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocblas${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs = [
     "out"
@@ -71,7 +77,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocBLAS";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-IYcrVcGH4yZDkFZeNOJPfG0qsPS/WiH0fTSUSdo1BH4=";
+    hash = "sha256-To5V5bydYR5iuUxkwpx79RrNdncvWmR/v/w9VnlKBq4=";
   };
 
   nativeBuildInputs =
@@ -89,7 +95,9 @@ stdenv.mkDerivation (finalAttrs: {
   buildInputs =
     [
       python3
+      libdrm
       hipblas-common
+      roctracer
     ]
     ++ lib.optionals withHipBlasLt [
       hipblaslt
@@ -116,12 +124,14 @@ stdenv.mkDerivation (finalAttrs: {
 
   dontStrip = true;
   env.CXXFLAGS =
-    "-O3 -DNDEBUG -I${hipblas-common}/include"
+    "-O3 ${cxxflags} -DNDEBUG -I${hipblas-common}/include -I${roctracer}/include -I${libdrm.dev}/include"
     + lib.optionalString (buildTests || buildBenchmarks) " -I${amd-blis}/include/blis";
   # Fails to link tests if we don't add amd-blis libs
-  env.LDFLAGS = lib.optionalString (
-    buildTests || buildBenchmarks
-  ) "-Wl,--as-needed -L${amd-blis}/lib -lblis-mt -lcblas";
+  env.LDFLAGS =
+    "-L${roctracer}/lib -L${libdrm}/lib"
+    + lib.optionalString (
+      buildTests || buildBenchmarks
+    ) "-Wl,--as-needed -L${amd-blis}/lib -lblis-mt -lcblas";
   env.TENSILE_ROCM_ASSEMBLER_PATH = "${stdenv.cc}/bin/clang++";
 
   cmakeFlags =
@@ -149,6 +159,7 @@ stdenv.mkDerivation (finalAttrs: {
       "-DCMAKE_INSTALL_BINDIR=bin"
       "-DCMAKE_INSTALL_INCLUDEDIR=include"
       "-DCMAKE_INSTALL_LIBDIR=lib"
+      "-DROCTX_PATH=${roctracer}"
     ]
     ++ lib.optionals buildTensile [
       "-DCPACK_SET_DESTDIR=OFF"
@@ -175,8 +186,6 @@ stdenv.mkDerivation (finalAttrs: {
   postPatch = ''
     substituteInPlace cmake/build-options.cmake \
       --replace-fail 'Tensile_CPU_THREADS ""' 'Tensile_CPU_THREADS "$ENV{NIX_BUILD_CORES}"'
-    substituteInPlace CMakeLists.txt \
-      --replace-fail "4.42.0" "4.43.0"
   '';
 
   passthru.updateScript = rocmUpdateScript {
diff --git a/pkgs/development/rocm-modules/6/rocdbgapi/default.nix b/pkgs/development/rocm-modules/6/rocdbgapi/default.nix
index 8226f62bf..047456994 100644
--- a/pkgs/development/rocm-modules/6/rocdbgapi/default.nix
+++ b/pkgs/development/rocm-modules/6/rocdbgapi/default.nix
@@ -43,7 +43,7 @@ let
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocdbgapi";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -57,7 +57,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "ROCdbgapi";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-6itfBrWVspobU47aiJAOQoxT8chwrq9scRn0or3bXto=";
+    hash = "sha256-Rr8+SNeFps0rjk4Jn2+rFmtRJfL42l0tNOz13oZQy+I=";
   };
 
   nativeBuildInputs =
diff --git a/pkgs/development/rocm-modules/6/rocfft/default.nix b/pkgs/development/rocm-modules/6/rocfft/default.nix
index d8ae87d50..86fbc80ae 100644
--- a/pkgs/development/rocm-modules/6/rocfft/default.nix
+++ b/pkgs/development/rocm-modules/6/rocfft/default.nix
@@ -19,13 +19,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocfft${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocFFT";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-RrxdwZ64uC7lQzyJI1eGHX2dmRnW8TfNThnuvuz5XWo=";
+    hash = "sha256-z8O//2lihXeVnYZklR8uUIgCS9RyNNRb+hM5keR5aYA=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocgdb/default.nix b/pkgs/development/rocm-modules/6/rocgdb/default.nix
index 8e009e583..47e7fa49b 100644
--- a/pkgs/development/rocm-modules/6/rocgdb/default.nix
+++ b/pkgs/development/rocm-modules/6/rocgdb/default.nix
@@ -23,13 +23,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocgdb";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "ROCgdb";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-Z+uk+ViLXgk5hXrIhVHRY0Kly7mktYms7M3o9Tmxv8s=";
+    hash = "sha256-evDWg2w2FHv6OU5BQOCAXTlDm7JpwdJ3Wh5a2i5r1gQ=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocm-bandwidth-test/default.nix b/pkgs/development/rocm-modules/6/rocm-bandwidth-test/default.nix
index 1da28d9b2..6bf27755e 100644
--- a/pkgs/development/rocm-modules/6/rocm-bandwidth-test/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-bandwidth-test/default.nix
@@ -8,13 +8,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocm-bandwidth-test";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocm_bandwidth_test";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-dHyfYpRB13wUvim152nZ61McZOQ1zUZFx4dUo2vVqZM=";
+    hash = "sha256-myejKyhnj074A3A34y+RM68VtYUul8qabMfF2UD31ak=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocm-cmake/default.nix b/pkgs/development/rocm-modules/6/rocm-cmake/default.nix
index 23a48dcd5..cbdcf253c 100644
--- a/pkgs/development/rocm-modules/6/rocm-cmake/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-cmake/default.nix
@@ -9,13 +9,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocm-cmake";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocm-cmake";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-U4vGkH2iUlNJkqiNmVuFianD4WR9yuGvZsYG58smg0k=";
+    hash = "sha256-wAipNWAB66YNf7exLSNPAzg3NgkGD9LPKfKiulL5yak=";
   };
 
   nativeBuildInputs = [ cmake ];
diff --git a/pkgs/development/rocm-modules/6/rocm-comgr/default.nix b/pkgs/development/rocm-modules/6/rocm-comgr/default.nix
index 58b35a1a7..ffdb089df 100644
--- a/pkgs/development/rocm-modules/6/rocm-comgr/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-comgr/default.nix
@@ -28,21 +28,6 @@ stdenv.mkDerivation (finalAttrs: {
 
   sourceRoot = "${finalAttrs.src.name}/amd/comgr";
 
-  patches = [
-    # [Comgr] Extend ISA compatibility
-    (fetchpatch {
-      sha256 = "sha256-dgow0kwSWM1TnkqWOZDRQrh5nuF8p5jbYyOLCpQsH4k=";
-      url = "https://github.com/GZGavinZhao/rocm-llvm-project/commit/a439e4f37ce71de48d4a979594276e3be0e6278f.patch";
-      relative = "amd/comgr";
-    })
-    #[Comgr] Extend ISA compatibility for CCOB
-    (fetchpatch {
-      sha256 = "sha256-6Rwz12Lk4R2JK3olii3cr2Zd0ZLYe7VSpK1YRCOsJWY=";
-      url = "https://github.com/GZGavinZhao/rocm-llvm-project/commit/2d8c459a4d4c0567a7a275b4b54560d88e5c6919.patch";
-      relative = "amd/comgr";
-    })
-  ];
-
   nativeBuildInputs = [
     cmake
     python3
diff --git a/pkgs/development/rocm-modules/6/rocm-core/default.nix b/pkgs/development/rocm-modules/6/rocm-core/default.nix
index 55316f4c6..f0cea7a2a 100644
--- a/pkgs/development/rocm-modules/6/rocm-core/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-core/default.nix
@@ -9,13 +9,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocm-core";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocm-core";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-UDnPGvgwzwv49CzF+Kt0v95CsxS33BZeqNcKw1K6jRI=";
+    hash = "sha256-dDTCEAbeA88deLgUbdbulaHpHI9zcTze0mZeS49TsAM=";
   };
 
   nativeBuildInputs = [ cmake ];
diff --git a/pkgs/development/rocm-modules/6/rocm-runtime/default.nix b/pkgs/development/rocm-modules/6/rocm-runtime/default.nix
index c40f27069..a8d368c4d 100644
--- a/pkgs/development/rocm-modules/6/rocm-runtime/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-runtime/default.nix
@@ -19,13 +19,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocm-runtime";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "ROCR-Runtime";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-du20+5VNYgwchGO7W7FIVebBqLPtfSBnmPVbPpgEZjo=";
+    hash = "sha256-LOILnvjGwlLoB99+TdZib7VJsgp45yGJiEPgrlwXItI=";
   };
 
   env.CFLAGS = "-I${numactl.dev}/include -I${elfutils.dev}/include -w";
@@ -62,11 +62,6 @@ stdenv.mkDerivation (finalAttrs: {
       url = "https://github.com/ROCm/ROCR-Runtime/commit/39a6a168fa07e289a10f6e20e6ead4e303e99ba0.patch";
       hash = "sha256-CshJJDvII1nNyNmt+YjwMwfBHUTlrdsxkhwfgBwO+WE=";
     })
-    (fetchpatch {
-      # [PATCH] rocr: refactor of runtime.cpp based on Coverity
-      url = "https://github.com/ROCm/ROCR-Runtime/commit/441bd9fe6c7bdb5c4c31f71524ed642786bc923e.patch";
-      hash = "sha256-7bQXxGkipzgT2aXRxCuh3Sfmo/zc/IOmA0x1zB+fMb0=";
-    })
     (fetchpatch {
       # [PATCH] queues: fix UB due to 1 << 31
       url = "https://github.com/ROCm/ROCR-Runtime/commit/9b8a0f5dbee1903fa990a7d8accc1c5fbc549636.patch";
diff --git a/pkgs/development/rocm-modules/6/rocm-smi/default.nix b/pkgs/development/rocm-modules/6/rocm-smi/default.nix
index 981c3ca6f..62654ff11 100644
--- a/pkgs/development/rocm-modules/6/rocm-smi/default.nix
+++ b/pkgs/development/rocm-modules/6/rocm-smi/default.nix
@@ -5,21 +5,26 @@
   rocmUpdateScript,
   cmake,
   wrapPython,
+  libdrm,
 }:
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocm-smi";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocm_smi_lib";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-j9pkyUt+p6IkhawIhiTymqDBydxXZunxmdyCyRN0RxE=";
+    hash = "sha256-qshAMVhHJIA06fGOTJx5/l1t8wKv7KbmvdCSKNuEIKM=";
   };
 
   patches = [ ./cmake.patch ];
 
+  buildInputs = [
+    libdrm.dev
+  ];
+
   nativeBuildInputs = [
     cmake
     wrapPython
diff --git a/pkgs/development/rocm-modules/6/rocminfo/default.nix b/pkgs/development/rocm-modules/6/rocminfo/default.nix
index 19d1f76db..616bf6f1f 100644
--- a/pkgs/development/rocm-modules/6/rocminfo/default.nix
+++ b/pkgs/development/rocm-modules/6/rocminfo/default.nix
@@ -20,14 +20,14 @@
 }:
 
 stdenv.mkDerivation (finalAttrs: {
-  version = "6.3.3";
+  version = "6.4.1";
   pname = "rocminfo";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocminfo";
     rev = "rocm-${finalAttrs.version}";
-    sha256 = "sha256-fQPtO5TNbCbaZZ7VtGkkqng5QZ+FcScdh1opWr5YkLU=";
+    sha256 = "sha256-YscZ5sFsLOVBg98w2X6vTzniTvl9NfCkIE+HAH6vv5Y=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocmlir/default.nix b/pkgs/development/rocm-modules/6/rocmlir/default.nix
index 13ffe4ada..8e7e6ccbc 100644
--- a/pkgs/development/rocm-modules/6/rocmlir/default.nix
+++ b/pkgs/development/rocm-modules/6/rocmlir/default.nix
@@ -41,7 +41,7 @@ let
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocmlir${suffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -55,7 +55,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocMLIR";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-0SQ6uLDRfVfdCX+8a7D6pu6dYlFvX0HFzCDEvlKYfak=";
+    hash = "sha256-p/gvr1Z6yZtO5N+ecSouXiCrf520jt1HMOy/tohUHfI=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocprim/default.nix b/pkgs/development/rocm-modules/6/rocprim/default.nix
index 87505bee0..d7dd7cfb7 100644
--- a/pkgs/development/rocm-modules/6/rocprim/default.nix
+++ b/pkgs/development/rocm-modules/6/rocprim/default.nix
@@ -15,7 +15,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocprim";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -32,7 +32,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocPRIM";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-0aHxpBuYIYhI2UER45YhHHL5YcxA+XeXoihcUs2AmCo=";
+    hash = "sha256-EP61n4syYMWjTDkjC0dWLj9yau6KL2qu1Bs5IBtw580=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocprofiler-register/default.nix b/pkgs/development/rocm-modules/6/rocprofiler-register/default.nix
index 64ef999a5..46713b4a1 100644
--- a/pkgs/development/rocm-modules/6/rocprofiler-register/default.nix
+++ b/pkgs/development/rocm-modules/6/rocprofiler-register/default.nix
@@ -18,13 +18,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocprofiler-register";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocprofiler-register";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-UZsCiGnudsbL1v5lKBx7Vz3/HRnGn4f86Pd+qu3ryh0=";
+    hash = "sha256-HaN4XMHuCRDfKOpfuZ2SkOEQfAZKouh6luqbtATUYm0=";
     fetchSubmodules = true;
   };
 
diff --git a/pkgs/development/rocm-modules/6/rocprofiler/default.nix b/pkgs/development/rocm-modules/6/rocprofiler/default.nix
index 06612a65d..9cdd5e771 100644
--- a/pkgs/development/rocm-modules/6/rocprofiler/default.nix
+++ b/pkgs/development/rocm-modules/6/rocprofiler/default.nix
@@ -44,13 +44,13 @@ let
 in
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocprofiler";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocprofiler";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-x6DVt1logBE8aNnuwukQhsv/vRqkJALcfAF+6yEQuIk=";
+    hash = "sha256-CgW8foM4W3K19kUK/l8IsH2Q9DHi/z88viXTxhNqlHQ=";
     fetchSubmodules = true;
   };
 
diff --git a/pkgs/development/rocm-modules/6/rocr-debug-agent/default.nix b/pkgs/development/rocm-modules/6/rocr-debug-agent/default.nix
index 7fbf0a04d..54dc2f627 100644
--- a/pkgs/development/rocm-modules/6/rocr-debug-agent/default.nix
+++ b/pkgs/development/rocm-modules/6/rocr-debug-agent/default.nix
@@ -12,13 +12,13 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocr-debug-agent";
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rocr_debug_agent";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-HYag5/E72hopDhS9EVcdyGgSvzbCMzKqLC+SIS28Y9M=";
+    hash = "sha256-otoxZ2NHkPDIFhvn4/nvaQ/W4LF38Nx9MZ9IYEf1DyY=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocrand/default.nix b/pkgs/development/rocm-modules/6/rocrand/default.nix
index d0796c126..219c5eedd 100644
--- a/pkgs/development/rocm-modules/6/rocrand/default.nix
+++ b/pkgs/development/rocm-modules/6/rocrand/default.nix
@@ -15,7 +15,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocrand${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -32,7 +32,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocRAND";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-rrRLPqEw39M+6dtPW8DcnQiSZNwxWNINJ1wjU098Vkk=";
+    hash = "sha256-XqGPXx+LqjJs602vtG5u578B1hitGlsopA0izbClHro=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocsolver/default.nix b/pkgs/development/rocm-modules/6/rocsolver/default.nix
index a9e06550a..2d1fc9abd 100644
--- a/pkgs/development/rocm-modules/6/rocsolver/default.nix
+++ b/pkgs/development/rocm-modules/6/rocsolver/default.nix
@@ -27,13 +27,15 @@
       "gfx1100"
       "gfx1101"
       "gfx1102"
+      "gfx1200"
+      "gfx1201"
     ]
   ),
 }:
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocsolver${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -50,7 +52,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocSOLVER";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-+sGU+0CB48iolJSyYo+xH36q5LCUp+nKtOYbguzMuhg=";
+    hash = "sha256-u5GRWetMnhEBJ9HZcXoEaqpdO8f0cuSPnq+XawljfUs=";
   };
 
   nativeBuildInputs =
diff --git a/pkgs/development/rocm-modules/6/rocsparse/default.nix b/pkgs/development/rocm-modules/6/rocsparse/default.nix
index b4a1ead76..5c3e4ff5a 100644
--- a/pkgs/development/rocm-modules/6/rocsparse/default.nix
+++ b/pkgs/development/rocm-modules/6/rocsparse/default.nix
@@ -20,7 +20,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocsparse${clr.gpuArchSuffix}";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -37,7 +37,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocSPARSE";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-6Cut5rbyqKFzHaXfJZGApyY9Mj1Zq/+U8MkXgy4X4Pw=";
+    hash = "sha256-l7rOuVthfrSO5bnhgm49cjPnRbV/2sFhSRT+mShkBek=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/rocthrust/default.nix b/pkgs/development/rocm-modules/6/rocthrust/default.nix
index 06cd7a552..cbbe5bd26 100644
--- a/pkgs/development/rocm-modules/6/rocthrust/default.nix
+++ b/pkgs/development/rocm-modules/6/rocthrust/default.nix
@@ -15,7 +15,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocthrust";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -32,7 +32,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocThrust";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-c1+hqP/LipaQ2/lPJo79YBd9H0n0Y7yHkxe0/INE14s=";
+    hash = "sha256-bHyqG0pSt6bc6cDMnd1uY+0o+V3cxdp0mUEzWYRdd20=";
   };
 
   nativeBuildInputs = [
diff --git a/pkgs/development/rocm-modules/6/roctracer/default.nix b/pkgs/development/rocm-modules/6/roctracer/default.nix
index c0fe6456d..4a27fcf4f 100644
--- a/pkgs/development/rocm-modules/6/roctracer/default.nix
+++ b/pkgs/development/rocm-modules/6/roctracer/default.nix
@@ -12,6 +12,7 @@
   gcc-unwrapped,
   libbacktrace,
   rocm-runtime,
+  rocm-merged-llvm,
   python3Packages,
   buildDocs ? false, # Nothing seems to be generated, so not making the output
   buildTests ? false,
@@ -19,7 +20,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "roctracer";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -36,7 +37,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "roctracer";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-GhnF7rqNLQLLB7nzIp0xNqyqBOwj9ZJ+hzzj1EAaXWU=";
+    hash = "sha256-Dwk5cBZLysmsVA2kwpQM0FQt2KXOGcaZcAw/d8VUaXw=";
   };
 
   nativeBuildInputs =
@@ -71,8 +72,15 @@ stdenv.mkDerivation (finalAttrs: {
   ];
 
   postPatch =
+    let
+      cxxflags = "-I${rocm-merged-llvm.libgcc}/include/c++ -I${rocm-merged-llvm.libgcc}/include/c++/x86_64-unknown-linux-gnu -I${rocm-merged-llvm.libgcc}/include";
+    in
     ''
       export HIP_DEVICE_LIB_PATH=${rocm-device-libs}/amdgcn/bitcode
+
+      substituteInPlace src/CMakeLists.txt \
+        --replace-fail "$<SEMICOLON>-I" "-D__HIP_PLATFORM_AMD__=1" \
+        --replace-fail "-o " "${cxxflags} -o "
     ''
     + lib.optionalString (!buildTests) ''
       substituteInPlace CMakeLists.txt \
diff --git a/pkgs/development/rocm-modules/6/rocwmma/default.nix b/pkgs/development/rocm-modules/6/rocwmma/default.nix
index 623e6878a..2098de974 100644
--- a/pkgs/development/rocm-modules/6/rocwmma/default.nix
+++ b/pkgs/development/rocm-modules/6/rocwmma/default.nix
@@ -19,7 +19,7 @@
 
 stdenv.mkDerivation (finalAttrs: {
   pname = "rocwmma";
-  version = "6.3.3";
+  version = "6.4.1";
 
   outputs =
     [
@@ -39,7 +39,7 @@ stdenv.mkDerivation (finalAttrs: {
     owner = "ROCm";
     repo = "rocWMMA";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-kih3hn6QhcMmyj9n8f8eO+RIgKQgWKIuzg8fb0eoRPE=";
+    hash = "sha256-fjyxMrzt74rE7Gf4v4WawYltuw1fvahwZUpauMIE3qc=";
   };
 
   patches = lib.optionals (buildTests || buildBenchmarks) [
diff --git a/pkgs/development/rocm-modules/6/rpp/default.nix b/pkgs/development/rocm-modules/6/rpp/default.nix
index 64fd8af1c..2455d9fa6 100644
--- a/pkgs/development/rocm-modules/6/rpp/default.nix
+++ b/pkgs/development/rocm-modules/6/rpp/default.nix
@@ -29,13 +29,13 @@ stdenv.mkDerivation (finalAttrs: {
         "cpu"
     );
 
-  version = "6.3.3";
+  version = "6.4.1";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "rpp";
     rev = "rocm-${finalAttrs.version}";
-    hash = "sha256-METwagek17/DdZGaOTQqvyU6xGt7OBMLHk4YM4KmgtA=";
+    hash = "sha256-rccVjSrOVIe4ZDtloCoCCI3u9UIcUqdirHIzS7ffAas=";
   };
 
   nativeBuildInputs =
diff --git a/pkgs/development/rocm-modules/6/tensile/default.nix b/pkgs/development/rocm-modules/6/tensile/default.nix
index 6d66513bd..80100972b 100644
--- a/pkgs/development/rocm-modules/6/tensile/default.nix
+++ b/pkgs/development/rocm-modules/6/tensile/default.nix
@@ -6,6 +6,7 @@
   buildPythonPackage,
   pytestCheckHook,
   setuptools,
+  distro,
   pyyaml,
   msgpack,
   simplejson,
@@ -23,14 +24,14 @@ buildPythonPackage rec {
   pname = if isTensileLite then "tensilelite" else "tensile";
   # Using a specific commit which has code object compression support from after the 6.3 release
   # Without compression packages are too large for hydra
-  version = "6.3-unstable-2024-12-10";
+  version = "6.4.1";
   format = "pyproject";
 
   src = fetchFromGitHub {
     owner = "ROCm";
     repo = "Tensile";
-    rev = "1752af518190500891a865379a4569b8abf6ba01";
-    hash = "sha256-Wvz4PVs//3Ox7ykZHpjPzOVwlyATyc+MmVVenfTzWK4=";
+    rev = "rocm-6.4.1";
+    hash = "sha256-mhH2xesqP4pr2sZsIKYE7vgTLC2+ow5EiNrLBvYJehE=";
   };
 
   # TODO: It should be possible to run asm caps test ONCE for all supported arches
@@ -56,7 +57,10 @@ buildPythonPackage rec {
       patchShebangs Tensile
     '';
 
-  buildInputs = [ setuptools ];
+  buildInputs = [
+    setuptools
+    distro
+  ];
 
   propagatedBuildInputs =
     [
@@ -83,8 +87,7 @@ buildPythonPackage rec {
       url = "https://github.com/GZGavinZhao/Tensile/commit/855cb15839849addb0816a6dde45772034a3e41f.patch";
     })
     ++ lib.optional isTensileLite ./tensilelite-create-library-dont-copy-twice.diff
-    ++ lib.optional isTensileLite ./tensilelite-gen_assembly-venv-err-handling.diff
-    ++ lib.optional isTensileLite ./tensilelite-compression.diff;
+    ++ lib.optional isTensileLite ./tensilelite-gen_assembly-venv-err-handling.diff;
 
   doCheck = false; # Too many errors, not sure how to set this up properly
 
