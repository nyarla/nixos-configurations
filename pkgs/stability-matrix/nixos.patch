diff --git a/StabilityMatrix.Avalonia/StabilityMatrix.Avalonia.csproj b/StabilityMatrix.Avalonia/StabilityMatrix.Avalonia.csproj
index f4207345..bae612a6 100644
--- a/StabilityMatrix.Avalonia/StabilityMatrix.Avalonia.csproj
+++ b/StabilityMatrix.Avalonia/StabilityMatrix.Avalonia.csproj
@@ -268,6 +268,5 @@
     <!-- set HUSKY to 0 to disable, or opt-in during CI by setting HUSKY to 1 -->
     <Target Name="husky" BeforeTargets="Restore;CollectPackageReferences" Condition="'$(HUSKY)' == 1 Or ('$(HUSKY)' != 0 And '$(CI)' != 'true')">
         <Exec Command="dotnet tool restore"  StandardOutputImportance="Low" StandardErrorImportance="High"/>
-        <Exec Command="dotnet husky install" StandardOutputImportance="Low" StandardErrorImportance="High" WorkingDirectory="../" />
     </Target>
 </Project>
diff --git a/StabilityMatrix.Core/Helper/Compat.cs b/StabilityMatrix.Core/Helper/Compat.cs
index 1a619bab..fb3da197 100644
--- a/StabilityMatrix.Core/Helper/Compat.cs
+++ b/StabilityMatrix.Core/Helper/Compat.cs
@@ -130,10 +130,7 @@ public static class Compat
         {
             Platform = PlatformKind.Linux | PlatformKind.Unix;
 
-            // For AppImage builds, the path is in `$APPIMAGE`
-            var appPath = Environment.GetEnvironmentVariable("APPIMAGE") ?? AppContext.BaseDirectory;
-            AppCurrentDir =
-                Path.GetDirectoryName(appPath) ?? throw new Exception("Could not find application directory");
+            AppCurrentDir = new DirectoryPath(AppContext.BaseDirectory);
             ExeExtension = "";
             DllExtension = ".so";
         }
@@ -185,17 +182,7 @@ public static class Compat
     {
         if (IsLinux)
         {
-            // Use name component of APPIMAGE
-            var appImage = Environment.GetEnvironmentVariable("APPIMAGE");
-            if (string.IsNullOrEmpty(appImage))
-            {
-#if DEBUG
-                return "DEBUG_NOT_RUNNING_IN_APPIMAGE";
-#else
-                throw new Exception("Could not find APPIMAGE environment variable");
-#endif
-            }
-            return Path.GetFileName(appImage);
+            return AppName + ".Avalonia";
         }
         using var process = Process.GetCurrentProcess();
         var fullPath = process.MainModule?.ModuleName;
