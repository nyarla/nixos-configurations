#!/usr/bin/env perl

use strict;
use warnings;

sub slurp {
    my $src = shift;
    open( my $fh, '<', $src )
      or err ("Failed to open path: ${src}");

    my $data = do { local $/; <$fh> };
    chomp($data);

    close($fh)
      or err ("Failed to close path: ${src}");

    return $data;
}

sub err($) {
    my $msg = shift;
    system( qw(zenity --error --text), $msg );
    exit 1;
}

sub reattach {
    my $id   = shift;
    my $name = shift;

    my $unbind = qq|echo -n ${id} >/sys/bus/usb/drivers/usb/unbind|;
    my $bind   = qq|echo -n ${id} >/sys/bus/usb/drivers/usb/bind|;

    my $cmd    = join q{; }, ( $unbind, $bind );
    my $result = system(qq|env SHELL=/bin/sh pkexec sh -c '${cmd}' |);
    if ( $result != 0 ) {
          err ("Failed to reattach USB device: ${id}: ${name}");
    }

    system(qw(zenity --info --text), "Reattach USB successfully: ${name}");
    
    exit 0;
}

sub main {
    my $name = shift // q{};

    my @desc = `lsusb | grep -P '${name}'`;

    if ( @desc != 1 ) {
          err "This script does not support multiple devices.";
    }

    my $info = shift @desc;
    chomp($info);

    my ( $vendor, $product ) = ( split qr{:}, ( split qr{ }, $info )[5] );

    my $id = q{};

    for my $dir (`ls /sys/bus/usb/devices/`) {
        chomp($dir);
        my $path = "/sys/bus/usb/devices/${dir}";

        if ( !-e "${path}/idProduct" ) {
            next;
        }

        if ( !-e "${path}/idVendor" ) {
            next;
        }

        if ( slurp("${path}/idProduct") ne $product ) {
            next;
        }

        if ( slurp("${path}/idVendor") ne $vendor ) {
            next;
        }

        $id = $dir;
        last;
    }

    if ( $id eq q{} ) {
          err "Faild to find USB devices: ${name}";
    }

    reattach($id, $name);
}

main(@ARGV);
